import java.security.DigestInputStream
import java.security.MessageDigest

apply plugin: 'com.android.application'
//apply from: 'release.gradle'

android {
    compileSdkVersion 30

    dependencies {
        implementation "androidx.annotation:annotation:1.2.0"
        implementation "androidx.preference:preference:1.1.1"
        // https://mvnrepository.com/artifact/com.google.code.gson/gson
        implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.7'

    }

    defaultConfig {
        applicationId "app.virtshell"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode 5
        versionName "1.4"

        archivesBaseName = "vshell-v$versionName"

        ndk {
            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
//    sourceSets {
//        main {
//            jniLibs.srcDirs = ['src/main/libs']
//            java.srcDirs = ['src']
//        }
//    }
}

def downloadAlpineLinuxIso(String version, String expectedChecksum) {
    def digest = MessageDigest.getInstance("SHA-256")

    def localUrl = "src/main/assets/operating-system.iso"
    def file = new File(projectDir, localUrl)
    if (file.exists()) {
        def buffer = new byte[16384]
        def input = new FileInputStream(file)
        while (true) {
            def readBytes = input.read(buffer)
            if (readBytes < 0) break
            digest.update(buffer, 0, readBytes)
        }
        def checksum = new BigInteger(1, digest.digest()).toString(16)
        if (checksum == expectedChecksum) {
            return
        } else {
            logger.quiet("Deleting old local file with wrong hash: " + localUrl)
            file.delete()
        }
    }

    def remoteUrl = "https://dl-cdn.alpinelinux.org/alpine/v" + version.take(4) + "/releases/x86_64/alpine-virt-" + version + "-x86_64.iso"
    logger.quiet("Downloading " + remoteUrl + " ...")

    file.parentFile.mkdirs()
    def out = new BufferedOutputStream(new FileOutputStream(file))

    def connection = new URL(remoteUrl).openConnection()
    connection.setInstanceFollowRedirects(true)
    def digestStream = new DigestInputStream(connection.inputStream, digest)
    out << digestStream
    out.close()

    def checksum = new BigInteger(1, digest.digest()).toString(16)
    if (checksum != expectedChecksum) {
        file.delete()
        throw new GradleException("Wrong checksum for " + remoteUrl + ": expected: " + expectedChecksum + ", actual: " + checksum)
    }
}

clean {
    doLast {
        def tree = fileTree(new File(projectDir, 'src/main/assets'))
        tree.include 'operating-system.iso'
        tree.each { it.delete() }
    }
}

task getSystemImage(){
    doLast {
        downloadAlpineLinuxIso("3.13.5", "e6bbcab275b704bc6521781f2342fff084700b458711fdf315a5816d9885943c")
    }
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.javaCompileProvider.get().dependsOn(getSystemImage)
    }
}
